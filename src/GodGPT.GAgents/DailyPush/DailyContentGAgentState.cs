using System;
using System.Collections.Generic;
using Orleans;
using Aevatar.Core.Abstractions;

namespace GodGPT.GAgents.DailyPush;

/// <summary>
/// State for daily content management GAgent
/// </summary>
[GenerateSerializer]
public class DailyContentGAgentState : StateBase
{
    /// <summary>
    /// All available content for daily push
    /// </summary>
    [Id(0)] public Dictionary<string, DailyNotificationContent> Contents { get; set; } = new();
    
    /// <summary>
    /// Content usage history by date (key: yyyy-MM-dd, value: set of content IDs)
    /// </summary>
    [Id(1)] public Dictionary<string, HashSet<string>> DailyUsageHistory { get; set; } = new();
    
    /// <summary>
    /// Last content refresh timestamp
    /// </summary>
    [Id(2)] public DateTime LastRefresh { get; set; }
    
    /// <summary>
    /// Last selection timestamp
    /// </summary>
    [Id(3)] public DateTime LastSelection { get; set; }
    
    /// <summary>
    /// Total selection count
    /// </summary>
    [Id(4)] public int SelectionCount { get; set; }
    
    /// <summary>
    /// Timezone GUID to timezone ID mapping for reverse lookup
    /// Key: GUID generated by TimezoneToGuid(), Value: original timezone ID
    /// </summary>
    [Id(5)] public Dictionary<Guid, string> TimezoneGuidMappings { get; set; } = new();
    
    /// <summary>
    /// Get content IDs used on specific date
    /// </summary>
    public HashSet<string> GetUsedContentIds(DateTime date)
    {
        var dateKey = date.ToString("yyyy-MM-dd");
        return DailyUsageHistory.TryGetValue(dateKey, out var usedIds) ? usedIds : new HashSet<string>();
    }
    
    /// <summary>
    /// Mark content as used on specific date
    /// </summary>
    public void MarkContentAsUsed(DateTime date, string contentId)
    {
        var dateKey = date.ToString("yyyy-MM-dd");
        if (!DailyUsageHistory.ContainsKey(dateKey))
        {
            DailyUsageHistory[dateKey] = new HashSet<string>();
        }
        DailyUsageHistory[dateKey].Add(contentId);
        
        // Clean old history (keep only last 7 days)
        CleanOldHistory(date);
    }
    
    /// <summary>
    /// Clean usage history older than retention period
    /// </summary>
    private void CleanOldHistory(DateTime currentDate)
    {
        var cutoffDate = currentDate.AddDays(-DailyPushConstants.CONTENT_HISTORY_DAYS);
        var keysToRemove = new List<string>();
        
        foreach (var key in DailyUsageHistory.Keys)
        {
            if (DateTime.TryParse(key, out var date) && date < cutoffDate)
            {
                keysToRemove.Add(key);
            }
        }
        
        foreach (var key in keysToRemove)
        {
            DailyUsageHistory.Remove(key);
        }
    }
}
